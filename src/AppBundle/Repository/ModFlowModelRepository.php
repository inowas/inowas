<?php

namespace AppBundle\Repository;
use AppBundle\Entity\ModelObject;
use AppBundle\Model\Interpolation\BoundingBox;

/**
 * ModFlowInitialValueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ModFlowModelRepository extends \Doctrine\ORM\EntityRepository
{
    public function findByLayerId($soilModelId)
    {
        $query = $this->createQueryBuilder('mfm')
            ->leftJoin('mfm.soilModel', 'sm')
            ->where('sm.id = :id')
            ->setParameter('id', $soilModelId)
            ->getQuery();

        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function transformBoundingBox(BoundingBox $boundingBox, $targetSrid)
    {
        $query = $this->getEntityManager()
            ->getConnection()
            ->prepare(sprintf('SELECT ST_AsGeoJson(ST_Transform(ST_GeomFromText(\'POINT(%s %s)\' , %s), %s))',
                $boundingBox->getXMin(),
                $boundingBox->getYMin(),
                $boundingBox->getSrid(),
                $targetSrid
                ))
        ;

        $query->execute();
        $lowerLeft = json_decode($query->fetchAll()[0]['st_asgeojson']);

        $query = $this->getEntityManager()
            ->getConnection()
            ->prepare(sprintf('SELECT ST_AsGeoJson(ST_Transform(ST_GeomFromText(\'POINT(%s %s)\' , %s), %s))',
                $boundingBox->getXMax(),
                $boundingBox->getYMax(),
                $boundingBox->getSrid(),
                $targetSrid
            ))
        ;

        $query->execute();
        $upperRight = json_decode($query->fetchAll()[0]['st_asgeojson']);

        $bb = new BoundingBox();
        $bb->setXMin($lowerLeft->coordinates[0]);
        $bb->setYMin($lowerLeft->coordinates[1]);
        $bb->setXMax($upperRight->coordinates[0]);
        $bb->setYMax($upperRight->coordinates[1]);
        $bb->setSrid($targetSrid);

        return $bb;
    }

    public function getGeometryFromModelObjectAsGeoJSON(ModelObject $mo, $targetSrid)
    {
        $id = $mo->getId()->toString();
        $query = $this->getEntityManager()
            ->createQuery('SELECT ST_AsGeoJson(ST_Transform(a.geometry, :srid)) FROM AppBundle:ConstantHeadBoundary a WHERE a.id = :id')
            ->setParameter('id', $id)
            ->setParameter('srid', $targetSrid)
        ;

        return $query->getSingleScalarResult();
    }
}
